// 定义一个数组，存储对应的字符
var items = [
    [
        "杖/锤/棍",
        "刀/剑/斧",
        "弓/弩",
        "铳/炮/喷射器",
        "枪/矛",
        "锯/剪/镰",
        "投掷物(镖/飞轮/梭/手雷)",
        "盾/甲胄/头盔",
        "臂铠/手套/指虎/爪",
        "钩索/软剑/链锤/鞭/针线",
        "工程工具",
        "自动机械/无人机/载具/机甲",
        "召唤生物",
        "乐器/法球/魔典/符文/图腾",
        "饰物(冠冕/戒指/挂饰/手镯手链/耳环/眼镜)",
        "杂项(伞/扇/罗盘/拂尘/毛刷/旗帜/瓶装液体/食物/钥匙/钟表/灯、灯笼/钱币/骰子及其他)",
        "自定义"
    ],
    [
        "碳素",
        "异铁",
        "源石",
        "其它无机质",
        "有机质",
        "能量体",
        "自定义",
        "龙骨"
    ],
    [
        "碳素",
        "异铁",
        "源石",
        "其它无机质",
        "有机质",
        "能量体",
        "自定义",
        "赤金"
    ],
    [
        "源岩系列",
        "锰矿系列",
        "RMA-70 系列",
        "源石系列",
        "D32钢",
        "烧结核凝晶",
        "黑曜石/耶拉冈德之石/“兽之泪”/火龙的红玉",
        "自定义"
    ],
    [
        "源岩系列",
        "职业芯片",
        "研磨石系列",
        "装置系列",
        "晶体系列",
        "合成玉",
        "双极纳米片",
        "晶体电子单元",
        "自定义"
    ],
    [
        "切削液系列",
        "凝胶系列",
        "扭转醇系列",
        "聚酸酯系列",
        "转质盐组系列",
        "聚合剂",
        "生机细胞",
        "递质",
        "数据黑盒",
        "理智",
        "自定义"
    ],
    [
        "自然的风",
        "普通的水",
        "酮凝集系列",
        "半自然溶剂系列",
        "汽化源石",
        "夕墨/罐装晌午茶/新酿烈刀子",
        "自定义"
    ],
    [
        "100元以内", // 1-10
        "500元以内", // 11-20
        "1000元以内", // 21-30
        "5000元以内", // 31-40
        "10000元以内", // 41-50
        "30000元以内",
        "50000元以内", // 51-60
        "100000元以内", // 61-70
        "500000元以内", // 71-80
        "1000000元以上", // 91-100
        "天价！",
        "无价！！！！"
    ],
    [
        "哥伦比亚",
        "维多利亚",
        "莱塔尼亚",
        "拉特兰",
        "汐斯塔",
        "大炎",
        "东国",
        "萨尔贡",
        "伊比利亚",
        "乌萨斯",
        "卡兹戴尔",
        "玻利瓦尔",
        "雷姆必拓",
        "谢拉格",
        "焚风热土",
        "无尽冰原",
        "塔卫二",
        "古国(阿伽门/高卢/骏鹰帝国)",
        "罗德岛",
        "巴别塔",
        "整合运动",
        "深池",
        "黑钢",
        "喀兰贸易",
        "莱茵生命",
        "雷神工业"
    ],
    [
        "刚刚拿出盒子的程度",
        "试用了几次的程度",
        "使用了三四天的程度",
        "伴随你走过数个月的程度",
        "陪伴你一年的程度",
        "跟随你游荡四方数十年的程度",
        "被你当成了传家宝！你的魔杖已经被你盘出包浆来了！专家都说是商周的的程度",
        "甚至会变成人跳起来和你聊天的程度"
    ],
    [
        "像叛逆一样故意和你对着来的手感",
        "施法磕磕绊绊的堵塞手感",
        "勉强能用，但就是不舒服的手感",
        "工业产品特有的顺畅手感",
        "极其流畅，只有一点点不适的手感",
        "如丝绢般顺滑的手感",
        "万众无一的丝滑手感",
        "已经和你融为一体，无法分离了的……手感？"
    ],
    [
        "前文明",
        "源石时代",
        "终末地时代"
    ]
];

// // 定义一个数组，存储对应的范围
// var ranges = [20, 40, 50, 60, 65, 90, 100, 100];

var titles = [
    "法杖的形制(小-大；易操作-难使用)",
    "法杖的主体材质(粗加工-精加工；部件少-多)",
    "法杖的次要材质(粗加工-精加工；部件少-多)",
    "法杖的施术单元(纯度/稀有度低-高；处理方式普通-特殊)",
    "法杖的源石技艺回路材料(简单-复杂；运转慢-快)",
    "法杖的加工材料(粗加工-精加工；工艺简单-复杂)",
    "法杖的循环及冷却系统(低效-高效)",
    "法杖的造价(廉价-昂贵)",
    "法杖的产地(常见-偏远)",
    "法杖的新旧(全新-包浆)",
    "法杖的手感(硌手-丝滑)",
    "来自的时代"
];

// 定义一个数组，存储对应的区间
var intervals = [
    [
        [1, 20],
        [21, 30],
        [31, 40],
        [41, 50],
        [51, 55],
        [56, 60],
        [61, 65],
        [66, 70],
        [71, 73],
        [74, 76],
        [77, 78],
        [79, 85],
        [86, 87],
        [88, 90],
        [91, 92],
        [93, 95],
        [96, 100]
    ],
    [
        [1, 20],
        [21, 40],
        [41, 50],
        [51, 65],
        [66, 85],
        [86, 90],
        [91, 99],
        [100, 100]
    ],
    [
        [1, 20],
        [21, 40],
        [41, 50],
        [51, 65],
        [66, 85],
        [86, 90],
        [91, 99],
        [100, 100]
    ],
    [
        [1, 25],
        [26, 40],
        [41, 55],
        [56, 65],
        [66, 75],
        [76, 85],
        [86, 90],
        [91, 100]
    ],
    [
        [1, 25],
        [26, 40],
        [41, 55],
        [56, 65],
        [66, 75],
        [76, 85],
        [86, 90],
        [91, 100]
    ],
    [
        [1, 10],
        [11, 20],
        [21, 30],
        [31, 40],
        [41, 50],
        [51, 60],
        [61, 70],
        [71, 80],
        [81, 90],
        [91, 100]
    ],
    [
        [1, 30],
        [31, 50],
        [51, 60],
        [61, 70],
        [71, 80],
        [81, 90],
        [91, 100]
    ],
    [
        [1, 10],
        [11, 20],
        [21, 30],
        [31, 40],
        [41, 50],
        [51, 60],
        [61, 70],
        [71, 80],
        [81, 85],
        [86, 90],
        [91, 95],
        [95, 100]
    ],
    [
        [1, 5],
        [6, 10],
        [11, 20],
        [21, 30],
        [31, 35],
        [36, 40],
        [41, 45],
        [46, 50],
        [51, 55],
        [56, 60],
        [61, 65],
        [66, 70],
        [71, 75],
        [76, 80],
        [81, 90],
        [91, 100]
    ],
    [
        [1, 20],
        [21, 40],
        [41, 50],
        [51, 65],
        [66, 85],
        [86, 90],
        [91, 99],
        [100, 100]
    ],
    [
        [1, 20],
        [21, 40],
        [41, 50],
        [51, 65],
        [66, 85],
        [86, 90],
        [91, 99],
        [100, 100]
    ],
    [
        [1, 30],
        [31, 75],
        [76, 100]
    ]
];

// 定义一个函数，根据输入的字符生成一个种子
function getSeed(text) {
    // 将输入的字符转换为ASCII码的和
    var sum = 0;
    for (var i = 0; i < text.length; i++) {
        sum += text.charCodeAt(i);
    }
    // 将和取模100，得到一个0-99的整数
    var seed = sum % 114514;
    // 返回种子
    return seed;
}

// 定义一个函数，根据种子和范围生成一个随机整数
function randomInt(seed, range) {
    // 使用线性同余法生成随机数序列
    // 设置参数a, b, m
    var a = 11;
    var b = 17;
    var m = range;
    // 计算下一个随机数
    var next = (a * seed + b) % m;
    // 将随机数加一，得到一个1-range的整数
    var num = next + 1;
    // 返回随机数
    return num;
}

// 定义一个函数，根据随机数和条目，返回对应的字符
// function getItem(num, entry) {
// return items[entry][num - 1];
// }
// 定义一个函数，根据随机数和条目，返回对应的字符
function getItem(num, entry) {
    // 根据条目获取区间数组
    var interval = intervals[entry];
    // 遍历区间数组，找到随机数所在的区间索引
    var index = -1;
    for (var i = 0; i < interval.length; i++) {
        if (num >= interval[i][0] && num <= interval[i][1]) {
            index = i;
            break;
        }
    }
    // 如果找到了区间索引，返回对应的字符
    if (index != -1) {
        return items[entry][index];
    } else {
        // return "无效的数字";
        return items[entry][-1];
    }
}


// 定义一个函数，生成十个随机数，并显示在列表中
function generate() {
    var data = [];
    var data_int = [];

    // 获取输入框的值
    var text = document.getElementById("text").value;
    // 获取列表的元素
    var list = document.getElementById("list");
    // 清空列表的内容
    list.innerHTML = "";
    // 如果输入框不为空，才进行生成
    if (text != "") {
        // 根据输入的字符获取种子
        var seed = getSeed(text);
        // 循环八次，生成八个条目的随机数和字符
        for (var i = 0; i < 12; i++) {
            // 根据条目获取范围
            // var range = [20, 40, 50, 60, 65, 90, 100, 100][i];
            // 根据种子和范围生成一个随机数
            var num = randomInt(seed, 100);
            data_int[i] = num;
            // 根据随机数和条目获取对应的字符
            var item = getItem(num, i);
            // 创建一个列表项元素
            var li = document.createElement("li");
            li.style = "padding-top: 8px;"
            var div1 = document.createElement("div");
            var div2 = document.createElement("div");
            // 设置列表项的内容为条目、随机数和字符
            // li.innerHTML = titles[i] + "：" + num + " " + item;
            div1.innerHTML = titles[i] + ": " + item;
            div2.innerHTML = "出值：" + num;
            li.appendChild(div1);
            li.appendChild(div2);
            data[i] = item;
            // 将列表项添加到列表中
            list.appendChild(li);
            // 更新种子为随机数
            seed = num;
        }
    }


    var div3 = document.getElementById("div3");
    div3.style = "padding-top: 8px;";
    div3.innerHTML = "亲爱的" + text + "博士，" + "你的法杖是一根" + data[0] + ", 主体由" + data[1] + "打造，辅以" + data[2] + "，并使用" + data[5] + "进行加工" + "。其施术单元由" + data[3] + "构成，循环及冷却系统是" + data[6] + ", 而核心的源石技艺回路材料是" + data[4] + "。这把法杖的制造的开销在" + data[7] + "，真是一把好法杖！";

    var div4 = document.getElementById("div4");
    div4.style = "padding-top: 8px; padding-bottom: 28px";
    div4.innerHTML = "欢迎使用增值服务！经过知名专家鉴定，你的法杖产自于" + data[8] + "，新旧是" + data[9] + "，来自于" + data[11] + "，至于施法的手感，是一种" + data[10] + "。可喜可贺，可喜可贺！";

    // var div5 = document.getElementById("div5")
    // div5.style = "padding-top: 8px; padding-bottom: 28px"
    // div5.innerHTML = "增值服务"

    var rader_data = {
        labels: titles,
        datasets: [{ label: text, backgroundColor: "#4e73df", borderColor: "#4e73df", data: data_int, fill: true }],
        // options: { maintainAspectRatio: true, legend: { display: false, labels: { fontStyle: normal } }, title: { fontStyle: bold }, scales: { xAxes: [{ gridLines: { drawTicks: true }, ticks: { fontStyle: normal } }], yAxes: [{ gridLines: { drawTicks: true }, ticks: { fontStyle: normal } }] } }
    };

    // 获取 canvas 元素
    var ctx = document.getElementById("radar_pic").getContext("2d");

    // 创建一个图表对象
    var radar_pic = new Chart(ctx, {
        // 指定图表类型为雷达图
        type: "radar",
        // 指定图表的数据和配置项
        data: rader_data, // 使用你提供的数据
        options: {
            responsive: true, // 设置图表为响应式，根据屏幕窗口变化而变化
            maintainAspectRatio: false, // 保持图表原有比例
            elements: {
                line: {
                    borderWidth: 3 // 设置线条宽度
                }
            }
        }
    });
}
